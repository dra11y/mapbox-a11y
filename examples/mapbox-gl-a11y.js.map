{"version":3,"file":"mapbox-gl-a11y.js","sources":["../node_modules/xtend/immutable.js","../node_modules/@turf/helpers/index.js","../node_modules/@turf/meta/index.js","../node_modules/@turf/centroid/index.js","../src/index.js"],"sourcesContent":["module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.370,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius / 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.370,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1 / 1.0936,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, options) {\n    if (options === void 0) { options = {}; }\n    switch (type) {\n        case \"Point\": return point(coordinates).geometry;\n        case \"LineString\": return lineString(coordinates).geometry;\n        case \"Polygon\": return polygon(coordinates).geometry;\n        case \"MultiPoint\": return multiPoint(coordinates).geometry;\n        case \"MultiLineString\": return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\": return multiPolygon(coordinates).geometry;\n        default: throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num) && !/^\\s*$/.test(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return (!!input) && (input.constructor === Object);\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n// Deprecated methods\nfunction radians2degrees() {\n    throw new Error(\"method has been renamed to `radiansToDegrees`\");\n}\nexports.radians2degrees = radians2degrees;\nfunction degrees2radians() {\n    throw new Error(\"method has been renamed to `degreesToRadians`\");\n}\nexports.degrees2radians = degrees2radians;\nfunction distanceToDegrees() {\n    throw new Error(\"method has been renamed to `lengthToDegrees`\");\n}\nexports.distanceToDegrees = distanceToDegrees;\nfunction distanceToRadians() {\n    throw new Error(\"method has been renamed to `lengthToRadians`\");\n}\nexports.distanceToRadians = distanceToRadians;\nfunction radiansToDistance() {\n    throw new Error(\"method has been renamed to `radiansToLength`\");\n}\nexports.radiansToDistance = radiansToDistance;\nfunction bearingToAngle() {\n    throw new Error(\"method has been renamed to `bearingToAzimuth`\");\n}\nexports.bearingToAngle = bearingToAngle;\nfunction convertDistance() {\n    throw new Error(\"method has been renamed to `convertLength`\");\n}\nexports.convertDistance = convertDistance;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n    // Handles null Geometry -- Skips this GeoJSON\n    if (geojson === null) return;\n    var j, k, l, geometry, stopG, coords,\n        geometryMaybeCollection,\n        wrapShrink = 0,\n        coordIndex = 0,\n        isGeometryCollection,\n        type = geojson.type,\n        isFeatureCollection = type === 'FeatureCollection',\n        isFeature = type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[featureIndex].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n            var multiFeatureIndex = 0;\n            var geometryIndex = 0;\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;\n\n            // Handles null Geometry -- Skips this geometry\n            if (geometry === null) continue;\n            coords = geometry.coordinates;\n            var geomType = geometry.type;\n\n            wrapShrink = (excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon')) ? 1 : 0;\n\n            switch (geomType) {\n            case null:\n                break;\n            case 'Point':\n                if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                coordIndex++;\n                multiFeatureIndex++;\n                break;\n            case 'LineString':\n            case 'MultiPoint':\n                for (j = 0; j < coords.length; j++) {\n                    if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                    coordIndex++;\n                    if (geomType === 'MultiPoint') multiFeatureIndex++;\n                }\n                if (geomType === 'LineString') multiFeatureIndex++;\n                break;\n            case 'Polygon':\n            case 'MultiLineString':\n                for (j = 0; j < coords.length; j++) {\n                    for (k = 0; k < coords[j].length - wrapShrink; k++) {\n                        if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                        coordIndex++;\n                    }\n                    if (geomType === 'MultiLineString') multiFeatureIndex++;\n                    if (geomType === 'Polygon') geometryIndex++;\n                }\n                if (geomType === 'Polygon') multiFeatureIndex++;\n                break;\n            case 'MultiPolygon':\n                for (j = 0; j < coords.length; j++) {\n                    geometryIndex = 0;\n                    for (k = 0; k < coords[j].length; k++) {\n                        for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                            if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                            coordIndex++;\n                        }\n                        geometryIndex++;\n                    }\n                    multiFeatureIndex++;\n                }\n                break;\n            case 'GeometryCollection':\n                for (j = 0; j < geometry.geometries.length; j++)\n                    if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;\n                break;\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n    }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n    var previousValue = initialValue;\n    coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;\n        else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n    }, excludeWrapCoord);\n    return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n    var i;\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        for (i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i].properties, i) === false) break;\n        }\n        break;\n    case 'Feature':\n        callback(geojson.properties, 0);\n        break;\n    }\n}\n\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    propEach(geojson, function (currentProperties, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;\n        else previousValue = callback(previousValue, currentProperties, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n    if (geojson.type === 'Feature') {\n        callback(geojson, 0);\n    } else if (geojson.type === 'FeatureCollection') {\n        for (var i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i], i) === false) break;\n        }\n    }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    featureEach(geojson, function (currentFeature, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n    var coords = [];\n    coordEach(geojson, function (coord) {\n        coords.push(coord);\n    });\n    return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n    var i, j, g, geometry, stopG,\n        geometryMaybeCollection,\n        isGeometryCollection,\n        featureProperties,\n        featureBBox,\n        featureId,\n        featureIndex = 0,\n        isFeatureCollection = geojson.type === 'FeatureCollection',\n        isFeature = geojson.type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (i = 0; i < stop; i++) {\n\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[i].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        featureProperties = (isFeatureCollection ? geojson.features[i].properties :\n            (isFeature ? geojson.properties : {}));\n        featureBBox = (isFeatureCollection ? geojson.features[i].bbox :\n            (isFeature ? geojson.bbox : undefined));\n        featureId = (isFeatureCollection ? geojson.features[i].id :\n            (isFeature ? geojson.id : undefined));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (g = 0; g < stopG; g++) {\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n\n            // Handle null Geometry\n            if (geometry === null) {\n                if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                continue;\n            }\n            switch (geometry.type) {\n            case 'Point':\n            case 'LineString':\n            case 'MultiPoint':\n            case 'Polygon':\n            case 'MultiLineString':\n            case 'MultiPolygon': {\n                if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                break;\n            }\n            case 'GeometryCollection': {\n                for (j = 0; j < geometry.geometries.length; j++) {\n                    if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                }\n                break;\n            }\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n        // Only increase `featureIndex` per each feature\n        featureIndex++;\n    }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;\n        else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n    geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n        // Callback for single geometry\n        var type = (geometry === null) ? null : geometry.type;\n        switch (type) {\n        case null:\n        case 'Point':\n        case 'LineString':\n        case 'Polygon':\n            if (callback(helpers.feature(geometry, properties, {bbox: bbox, id: id}), featureIndex, 0) === false) return false;\n            return;\n        }\n\n        var geomType;\n\n        // Callback for multi-geometry\n        switch (type) {\n        case 'MultiPoint':\n            geomType = 'Point';\n            break;\n        case 'MultiLineString':\n            geomType = 'LineString';\n            break;\n        case 'MultiPolygon':\n            geomType = 'Polygon';\n            break;\n        }\n\n        for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {\n            var coordinate = geometry.coordinates[multiFeatureIndex];\n            var geom = {\n                type: geomType,\n                coordinates: coordinate\n            };\n            if (callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;\n        }\n    });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {\n        if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n        var segmentIndex = 0;\n\n        // Exclude null Geometries\n        if (!feature.geometry) return;\n        // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n        var type = feature.geometry.type;\n        if (type === 'Point' || type === 'MultiPoint') return;\n\n        // Generate 2-vertex line segments\n        var previousCoords;\n        var previousFeatureIndex = 0;\n        var previousMultiIndex = 0;\n        var prevGeomIndex = 0;\n        if (coordEach(feature, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {\n            // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n            if (previousCoords === undefined || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {\n                previousCoords = currentCoord;\n                previousFeatureIndex = featureIndex;\n                previousMultiIndex = multiPartIndexCoord;\n                prevGeomIndex = geometryIndex;\n                segmentIndex = 0;\n                return;\n            }\n            var currentSegment = helpers.lineString([previousCoords, currentCoord], feature.properties);\n            if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;\n            segmentIndex++;\n            previousCoords = currentCoord;\n        }) === false) return false;\n    });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentInex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    var started = false;\n    segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n        if (started === false && initialValue === undefined) previousValue = currentSegment;\n        else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);\n        started = true;\n    });\n    return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n    // validation\n    if (!geojson) throw new Error('geojson is required');\n\n    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n        if (feature.geometry === null) return;\n        var type = feature.geometry.type;\n        var coords = feature.geometry.coordinates;\n        switch (type) {\n        case 'LineString':\n            if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false) return false;\n            break;\n        case 'Polygon':\n            for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {\n                if (callback(helpers.lineString(coords[geometryIndex], feature.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n            }\n            break;\n        }\n    });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;\n        else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var segmentIndex = options.segmentIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find SegmentIndex\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n        if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n        return helpers.lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n        return helpers.lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n        return helpers.lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n        return helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var coordIndex = options.coordIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find Coord Index\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n        return helpers.point(coords, properties, options);\n    case 'MultiPoint':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        return helpers.point(coords[multiFeatureIndex], properties, options);\n    case 'LineString':\n        if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n        return helpers.point(coords[coordIndex], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;\n        return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;\n        return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n        return helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.coordAll = coordAll;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.findSegment = findSegment;\nexports.findPoint = findPoint;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar meta_1 = require(\"@turf/meta\");\nvar helpers_1 = require(\"@turf/helpers\");\n/**\n * Takes one or more features and calculates the centroid using the mean of all vertices.\n * This lessens the effect of small islands and artifacts when calculating the centroid of a set of polygons.\n *\n * @name centroid\n * @param {GeoJSON} geojson GeoJSON to be centered\n * @param {Object} [options={}] Optional Parameters\n * @param {Object} [options.properties={}] an Object that is used as the {@link Feature}'s properties\n * @returns {Feature<Point>} the centroid of the input features\n * @example\n * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n *\n * var centroid = turf.centroid(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, centroid]\n */\nfunction centroid(geojson, options) {\n    if (options === void 0) { options = {}; }\n    var xSum = 0;\n    var ySum = 0;\n    var len = 0;\n    meta_1.coordEach(geojson, function (coord) {\n        xSum += coord[0];\n        ySum += coord[1];\n        len++;\n    });\n    return helpers_1.point([xSum / len, ySum / len], options.properties);\n}\nexports.default = centroid;\n","'use strict';\n\nimport xtend from 'xtend';\nimport centroid from '@turf/centroid';\n\nexport default class MapboxA11y {\n  constructor(options) {\n    const defaultOptions = {\n      width: 0.002,\n      height: 0.002,\n      minWidth: 0.0005,\n      minHeight: 0.0005,\n      maxWidth: 1,\n      maxHeight: 1\n    };\n\n    // if (!options && !options.layers) {\n    //   throw new Error('An array of layers is required');\n    // }\n\n    // if (!options && !options.accessibleLabelProperty) {\n    //   throw new Error('a valid accessibleLabelProperty is required');\n    // }\n\n    this.options = xtend(defaultOptions, options);\n  }\n\n  clearMarkers = () => {\n    if (this.features) {\n      this.features.forEach(feature => {\n        if (feature.marker) {\n          this.map.getCanvasContainer().removeChild(feature.marker);\n          delete feature.marker;\n        }\n      });\n    }\n  }\n\n  setCenter = () => {\n    let center = this.map.getCenter().toArray().map(x => Math.round(x * 10000) / 10000);\n    let zoom = Math.round(10000 * this.map.getZoom()) / 10000;\n    if (this.zoom && this.zoom == zoom && this.center && (center[0] == this.center[0] && center[1] == this.center[1])) {\n      return;\n    }\n    this.center = center;\n    this.zoom = zoom;\n  }\n\n  updateCursor = () => {\n    console.log('updateCursor');\n    this.nw = [this.center[0] - (this.options.width / 2.0), this.center[1] + (this.options.height / 2.0)];\n    this.sw = [this.center[0] - (this.options.width / 2.0), this.center[1] - (this.options.height / 2.0)];\n    this.ne = [this.center[0] + (this.options.width / 2.0), this.center[1] + (this.options.height / 2.0)];\n    this.se = [this.center[0] + (this.options.width / 2.0), this.center[1] - (this.options.height / 2.0)];\n    this.fit_sw = this.sw.map(x => x - this.options.width / 10);\n    this.fit_ne = this.ne.map(x => x + this.options.width / 10);\n    var bl = this.map.project(this.sw);\n    var tl = this.map.project(this.nw);\n    var tr = this.map.project(this.ne);\n\n    var pix_width = Math.abs(tr.x - bl.x);\n    var pix_height = Math.abs(tr.y - bl.y);\n\n    this.cursor.style.position = 'absolute';\n    this.cursor.style.width = `${pix_width}px`;\n    this.cursor.style.height = `${pix_height}px`;\n    this.cursor.style.top = `${tl.y}px`;\n    this.cursor.style.left = `${tl.x}px`;\n  }\n\n  announceFeatures = () => {\n    let pix_x = this.cursor.offsetLeft;\n    let pix_y = this.cursor.offsetTop;\n    let pix_width = this.cursor.offsetWidth;\n    let pix_height = this.cursor.offsetHeight;\n\n    let features = this.map.queryRenderedFeatures([[pix_x, pix_y + pix_height], [pix_x + pix_width, pix_y]], {});\n\n    // console.log(features.filter(f => f.layer.id == 'poi'));\n\n    let dupFeatures = [...features];\n    dupFeatures.forEach(f => f.centroid = centroid(f).geometry.coordinates);\n    dupFeatures.forEach(f => {\n      let c = f.centroid;\n      f.quad = (\n        (c[1] < this.center[1] ? 0 : 2) + (c[0] < this.center[0] ? 0 : 1)\n      );\n      f.quadrant = ['SW', 'SE', 'NW', 'NE'][f.quad];\n    });\n\n    let sortedFeatures = dupFeatures.sort((a, b) => a.quad - b.quad);\n    var quadFeatures = [0, 1, 2, 3].map(x => {\n      return {\n        'POI': [],\n        'roads': [],\n        'buildings': []\n      };\n    });\n\n    for (var quad = 0; quad < 4; quad++) {\n      sortedFeatures.filter(x => x.quad == quad).forEach((feature) => {\n        var name = (feature.properties.name === undefined) ? '' : feature.properties.name;\n        var description = '';\n        // console.log(feature);\n        switch (feature.layer.id) {\n          case 'poi':\n            console.log('poi:');\n            console.log(feature);\n            // check if exists already:\n            let other_tags = JSON.parse('{' + feature.properties.other_tags.replaceAll('=>', ':') + '}')\n            console.log('other_tags:');\n            console.log(other_tags);\n\n            // light_rail: \"yes\"\n            // network: \"RTD\"\n            // operator: \"Regional Transportation District\"\n            // public_transport: \"stop_position\"\n            // railway: \"stop\"\n\n            var description = '';\n            if (other_tags['public_transport'] !== undefined) {\n              description += ' (' + other_tags['network'] + ') ' +\n                (other_tags['light_rail'] == 'yes' ? 'light rail station' : ' ') +\n                (other_tags['bus'] == 'yes' ? 'bus stop' : ' ')\n            }\n            if (other_tags['leisure'] !== undefined) {\n              description += ' leisure: ' + other_tags['leisure'];\n            }\n            if (other_tags['amenity'] !== undefined) {\n              description += ' ' + other_tags['amenity'];\n            }\n            if (other_tags['shop'] !== undefined) {\n              description += ' ' + other_tags['shop'] + ' shop';\n            }\n            if (other_tags['craft'] !== undefined) {\n              description += ' ' + other_tags['craft'];\n            }\n            description = name + ' ' + description;\n\n            if (quadFeatures[feature.quad]['POI'].indexOf(description) == -1) {\n              quadFeatures[feature.quad]['POI'].push(description);\n            }\n\n            break;\n          // case 'building':\n          //   quadFeatures[feature.quad]['buildings'].push({\n          //     type: feature._vectorTileFeatures._values[4],\n\n          //   });\n          case 'road-primary':\n          case 'road-motorway-trunk':\n          case 'road-secondary-tertiary':\n          case 'road-street':\n          case 'road-rail':\n          // case 'transit-label':\n          // pedestrian:\n          case 'road-path':\n          case 'road-pedestrian':\n            // if (feature.layer.id == 'transit-label') {\n            //   // console.log(feature);\n            //   /*\n            //   properties:\n            //     filterrank: 1\n            //     iso_3166_1: \"US\"\n            //     iso_3166_2: \"US-CO\"\n            //     maki: \"rail\"\n            //     mode: \"rail\"\n            //     name: \"Littleton Downtown\"\n            //     name_en: \"Littleton/Downtown\"\n            //     name_script: \"Latin\"\n            //     network: \"rail\"\n            //     stop_type: \"station\"\n            //    */\n            //   name += ' ' + feature.network + ' ' +\n            //     (feature.light_rail == 'yes' ? 'light rail station' : 'bus stop');\n            // }\n            name = name.replace(/^W /is, 'West ')\n              .replace(/^E /is, 'East ')\n              .replace(/^N /is, 'North ')\n              .replace(/^S /is, 'South ')\n              .replace(/^SW /is, 'Southwest ')\n              .replace(/^SE /is, 'Southeast ')\n              .replace(/^NW /is, 'Northwest ')\n              .replace(/^NW /is, 'Northeast ')\n              .replace(/\\bAve\\b/is, 'Avenue ')\n              .replace(/\\bSt\\b/is, 'Street ')\n              .replace(/\\bRd\\b/is, 'Road ')\n              .replace(/\\bPl\\b/is, 'Place ')\n              .replace(/\\bCt\\b/is, 'Court ')\n              .replace(/\\bCir\\b/is, 'Circle ')\n              .replace(/\\bDr\\b/is, 'Drive ')\n              .replace(/\\bPkwy\\b/is, 'Parkway ')\n              .replace(/\\bHwy\\b/is, 'Highway ')\n            if (name && quadFeatures[feature.quad]['roads'].indexOf(name) == -1) {\n              quadFeatures[feature.quad]['roads'].push(name);\n            }\n            break;\n          default:\n            break;\n        }\n      });\n    };\n\n    this.label = '';\n\n    [0, 1, 2, 3].forEach(quad => {\n      if (quadFeatures[quad]['POI'].length + quadFeatures[quad]['roads'].length > 0) {\n        if (this.label.length > 0) this.label += '; ... ... ';\n        this.label += ['southwest', 'southeast', 'northwest', 'northeast'][quad] + ' quadrant: ';\n        if (quadFeatures[quad]['POI'].length > 0) {\n          this.label += quadFeatures[quad]['POI'].join(', ');\n          this.label += '; ... ';\n        }\n        if (quadFeatures[quad]['roads'].length > 0) {\n          this.label += quadFeatures[quad]['roads'].join(', ');\n          this.label += '; ... ';\n        }\n      }\n    });\n\n    if (this.cursor.getAttribute('aria-label') == this.label) {\n      this.label += ' . ';\n    }\n    this.cursor.setAttribute('aria-label', this.label);\n    this.cursor.setAttribute('title', this.label);\n    console.log(this.label);\n  }\n\n  zoomIn = () => {\n    this.options.width /= 2;\n    this.options.height /= 2;\n    if (this.options.width < this.options.minWidth)\n      this.options.width = this.options.minWidth;\n    if (this.options.height < this.options.minHeight)\n      this.options.height = this.options.minHeight;\n\n    this.updateCursor();\n    setTimeout(() => {\n      this.map.fitBounds([this.fit_sw, this.fit_ne]);\n    }, 100);\n  }\n\n  zoomOut = () => {\n    this.options.width *= 2;\n    this.options.height *= 2;\n    if (this.options.width > this.options.maxWidth)\n      this.options.width = this.options.maxWidth;\n    if (this.options.height > this.options.maxHeight)\n      this.options.height = this.options.maxHeight;\n\n    this.updateCursor();\n    setTimeout(() => {\n      this.map.fitBounds([this.fit_sw, this.fit_ne]);\n    }, 100);\n  }\n\n  getZoomLevel = (multiplier = 1) => {\n    let meters = multiplier * this.options.width * 100000;\n    if (meters < 1000) {\n      return meters.toString() + ' meters';\n    } else {\n      return (meters / 1000).toString() + ' kilometers';\n    }\n  }\n\n  keydown = (e) => {\n    var dir = '';\n    let multiplier = (e.ctrlKey ? 0.2 : (e.shiftKey ? 10 : 1));\n    let multiplierName = (e.ctrlKey ? 'nudge' : (e.shiftKey ? 'jump' : ''));\n    switch (e.key.toLowerCase()) {\n      case '=':\n      case '+':\n        e.stopPropagation();\n        this.zoomIn();\n        dir = 'zoom in to ' + this.getZoomLevel();\n        break;\n      case '-':\n        e.stopPropagation();\n        this.zoomOut();\n        dir = 'zoom out to ' + this.getZoomLevel();\n        break;\n      case 'm':\n        this.center[1] -= multiplier * this.options.height;\n        dir = ' south' + this.getZoomLevel(multiplier);\n        break;\n      case 'i':\n        this.center[1] += multiplier * this.options.height;\n        dir = 'north ' + this.getZoomLevel(multiplier);\n        break;\n      case 'j':\n        this.center[0] -= multiplier * this.options.width;\n        dir = 'west ' + this.getZoomLevel(multiplier);\n        break;\n      case 'l':\n        this.center[0] += multiplier * this.options.width;\n        dir = 'east ' + this.getZoomLevel(multiplier);\n        break;\n      default:\n        break;\n    }\n\n    var dirLabel = multiplierName + ' ' + dir;\n    if (this.announceCommand.getAttribute('aria-label') == dirLabel)\n      dirLabel += ' .';\n    if (dirLabel.length > 50)\n      dirLabel = dirLabel.replaceAll(' .', '');\n\n    console.log(dirLabel);\n\n    this.announceCommand.setAttribute('aria-label', dirLabel);\n    this.map.panTo(this.center);\n  };\n\n\n  createCursor = () => {\n    this.cursor = document.createElement('button');\n    this.cursor.setAttribute('tabindex', 0);\n    this.cursor.setAttribute('aria-label', '');\n    this.cursor.setAttribute('aria-live', 'polite');\n    this.cursor.style.display = 'block';\n    this.cursor.className = 'mapboxgl-a11y-cursor';\n\n    this.cursor.addEventListener('keydown', this.keydown);\n\n    this.map.getCanvasContainer().appendChild(this.cursor);\n\n    this.announceCommand = document.createElement('div');\n    this.announceCommand.setAttribute('aria-live', 'assertive');\n    this.map.getCanvasContainer().appendChild(this.announceCommand);\n\n    setInterval(() => {\n      this.cursor.focus();\n    }, 1000);\n  }\n\n  _moveend = () => {\n    console.log('_moveend');\n    this.setCenter();\n    this.updateCursor();\n\n    setTimeout(() => {\n      this.announceFeatures();\n    }, 200);\n  }\n\n  _render = (e) => {\n    this.updateCursor();\n  }\n\n  onAdd(map) {\n    this.map = map;\n\n    // this._debouncedUpdateCursor = debounce(this.updateCursor, 100);\n\n    this.map.on('moveend', this._moveend);\n    this.map.on('render', this._render);\n\n    this.createCursor();\n\n    this._moveend();\n\n    this.announceCommand.setAttribute('aria-label', this.getZoomLevel());\n\n    this.container = document.createElement('div');\n    return this.container;\n  }\n\n  onRemove() {\n    this.container.parentNode.removeChild(this.container);\n    this.map.off('moveend', this._moveend);\n    this.map.off('render', this._render);\n    delete this.map;\n  }\n}\n"],"names":["module","extend","hasOwnProperty","Object","prototype","target","i","arguments","length","source","key","call","defineProperty","exports","value","centimeters","earthRadius","centimetres","degrees","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","radians","yards","acres","feature","geom","properties","options","feat","type","id","bbox","geometry","coordinates","point","lineString","polygon","multiPoint","multiLineString","multiPolygon","Error","points","featureCollection","map","coords","_i","coordinates_1","ring","j","polygons","lineStrings","features","fc","geometryCollection","geometries","round","num","precision","multiplier","Math","pow","radiansToLength","units","factor","factors","lengthToRadians","distance","lengthToDegrees","radiansToDegrees","bearingToAzimuth","bearing","angle","PI","degreesToRadians","convertLength","originalUnit","finalUnit","convertArea","area","startFactor","areaFactors","finalFactor","isNumber","isNaN","Array","isArray","test","isObject","input","constructor","validateBBox","forEach","validateId","indexOf","radians2degrees","degrees2radians","distanceToDegrees","distanceToRadians","radiansToDistance","bearingToAngle","convertDistance","coordEach","geojson","callback","excludeWrapCoord","k","l","stopG","geometryMaybeCollection","wrapShrink","coordIndex","isGeometryCollection","isFeatureCollection","isFeature","stop","featureIndex","geomIndex","multiFeatureIndex","geometryIndex","geomType","coordReduce","initialValue","previousValue","currentCoord","undefined","propEach","propReduce","currentProperties","featureEach","featureReduce","currentFeature","coordAll","coord","push","geomEach","g","featureProperties","featureBBox","featureId","geomReduce","currentGeometry","flattenEach","helpers","coordinate","flattenReduce","segmentEach","segmentIndex","previousCoords","previousFeatureIndex","previousMultiIndex","prevGeomIndex","featureIndexCoord","multiPartIndexCoord","currentSegment","segmentReduce","started","lineEach","lineReduce","currentLine","findSegment","findPoint","centroid","xSum","ySum","len","meta_1","helpers_1","MapboxA11y","marker","getCanvasContainer","removeChild","center","getCenter","toArray","x","zoom","getZoom","console","log","nw","width","height","sw","ne","se","fit_sw","fit_ne","bl","project","tl","tr","pix_width","abs","pix_height","y","cursor","style","position","top","left","pix_x","offsetLeft","pix_y","offsetTop","offsetWidth","offsetHeight","queryRenderedFeatures","dupFeatures","f","c","quad","quadrant","sortedFeatures","sort","a","b","quadFeatures","filter","name","description","layer","other_tags","JSON","parse","replaceAll","replace","label","join","getAttribute","setAttribute","minWidth","minHeight","updateCursor","setTimeout","fitBounds","maxWidth","maxHeight","toString","e","dir","ctrlKey","shiftKey","multiplierName","toLowerCase","stopPropagation","zoomIn","getZoomLevel","zoomOut","dirLabel","announceCommand","panTo","document","createElement","display","className","addEventListener","keydown","appendChild","setInterval","focus","setCenter","announceFeatures","defaultOptions","xtend","on","_moveend","_render","createCursor","container","parentNode","off"],"mappings":"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"}